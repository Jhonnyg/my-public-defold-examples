local texture_cache = require "main.texture_cache"

function save(self)
	self.cache:save(self.cache_path)
end

function create(self)
	self.cache = texture_cache.create(resource.TEXTURE_FORMAT_RGBA_BC3, 128, 4, 4)
end

function load(self)
	self.cache = texture_cache.load(self.cache_path)
end

function clear(self)
	self.cache:clear()
	self.cache:save(self.cache_path)
end

function init(self)
	msg.post(".", "acquire_input_focus")

	math.randomseed(socket.gettime())

	self.cache_path = "texture.cache"
	self.texture_paths = {
		"/textures/01.bin",
		"/textures/02.bin",
		"/textures/03.bin",
		"/textures/04.bin",
		"/textures/05.bin",
		"/textures/06.bin",
		"/textures/07.bin",
		"/textures/08.bin",
	}

	load(self)

	if not self.cache then
		create(self)
		save(self)
	end

	go.set("/cache_test#model", "texture0", self.cache:get_texture())
end

function get_random_cell(self)
	local x = math.random(0, self.cache:get_cells_x()-1)
	local y = math.random(0, self.cache:get_cells_y()-1)
	
	if self.cache:full() then
		return x,y
	end

	while (not self.cache:full()) do
		x = math.random(0, self.cache:get_cells_x()-1)
		y = math.random(0, self.cache:get_cells_y()-1)
		if self.cache:is_free(x,y) then
			return x,y
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("add") and action.released then
		local x,y     = get_random_cell(self)
		local rnd_ix  = math.random(1, #self.texture_paths)
		local rnd_tex = self.texture_paths[rnd_ix]

		self.cache:put(x, y, resource.load(rnd_tex))
		save(self)
	end

	if action_id == hash("clear") and action.released then
		clear(self)
	end
end