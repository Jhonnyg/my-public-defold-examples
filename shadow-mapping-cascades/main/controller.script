
-- Translates a matrix in-place
local function translate_matrix(mat,pos)
	mat.m03 = mat.m03 + pos.x
	mat.m13 = mat.m13 + pos.y
	mat.m23 = mat.m23 + pos.z
	return mat
end

local function get_rotation_from_yaw_pitch(yaw,pitch)
	return vmath.quat_rotation_x(math.rad(pitch)) * vmath.quat_rotation_y(math.rad(yaw))
end

-- Calculates a view matrix from euler degrees
local function get_matrix_from_rot_zoom(quat,zoom)
	local mat = vmath.matrix4_from_quat(quat)
	return translate_matrix(mat,vmath.vector3(0,0,-zoom))
end

function init(self)
	self.view  = { x = 0, y = 0, w = 1, h = 1, transform = vmath.matrix4() }

	self.yaw   = 0
	self.pitch = 0
	self.zoom  = 30
	self.time  = 0

	self.light_yaw       = 45
	self.light_pitch     = 45
	self.light_zoom      = 0
	self.light_rotation  = get_rotation_from_yaw_pitch(self.light_yaw, self.light_pitch)
	self.light_vector    = vmath.vector3(0,0,-1) --vmath.normalize(vmath.rotate(self.light_rotation, vmath.vector3(0,0,1)))
	self.light_transform = get_matrix_from_rot_zoom(self.light_rotation,self.light_zoom)

	self.light_transform = vmath.matrix4_look_at(vmath.vector3(), self.light_vector, vmath.vector3(0,1,0))

	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "set_light_transform",  { transform  = self.light_transform, direction = self.light_vector })
	msg.post("@render:", "set_near_far",         { near = 0.1, far = 500 })
end

function update(self, dt)
	self.time = self.time + dt
	
	-- Update camera
	self.view.transform = get_matrix_from_rot_zoom(get_rotation_from_yaw_pitch(self.yaw,self.pitch), self.zoom)
	msg.post("@render:", "set_view", self.view)

	-- Update scene
	local pos        = go.get_position("/shadow_sphere")
	local pos_offset = 5
	pos.x = math.sin(self.time) * pos_offset
	pos.z = math.cos(self.time) * pos_offset
	go.set_position(pos,"/shadow_sphere")
end

function on_input(self, action_id, action)
	if action_id == hash("M_LEFT") then
		self.did_input = true
		self.yaw       = self.yaw + action.dx
		self.pitch     = self.pitch - action.dy
	elseif action_id == hash("M_RIGHT") then
		self.zoom      = self.zoom + action.dy * 0.1
	end
end
